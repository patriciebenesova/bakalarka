{"version":3,"sources":["script.js"],"names":[],"mappings":";;;;;;;;IAEA,KAAA;AACA,UADA,KAAA,GACA;wBADA,KAAA;;AAEA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA,CAAA;AACA,MAAA,EAAA,GAAA,QAAA,CAAA,eAAA,CAAA;AACA,QAAA,EAAA,OAAA,CAAA,KAAA;AACA,SAAA,EAAA,OAAA,CAAA,MAAA;GACA,CAAA,CAAA;;AAEA,MAAA,EAAA,CAAA;EACA;;cATA,KAAA;;SAWA,gBAAA;AACA,OAAA,KAAA,EAAA,GAAA,CAAA;;AAEA,KAAA,CAAA,QAAA,CAAA,eAAA,EAAA,UAAA,MAAA,EAAA;AACA,MAAA,CAAA,QAAA,CAAA,eAAA,EAAA,UAAA,IAAA,EAAA;AACA,UAAA,GAAA,SAAA,CAAA,MAAA,EAAA,IAAA,CAAA,CAAA;;AAEA,OAAA,CAAA,QAAA,CAAA,cAAA,EAAA,UAAA,GAAA,EAAA;AACA,SAAA,GAAA,GAAA,CAAA;AACA,QAAA,CAAA,QAAA,CAAA,eAAA,EAAA,UAAA,IAAA,EAAA;AACA,WAAA,IAAA,IAAA,EAAA,EAAA;AACA,gBAAA,CAAA,KAAA,EAAA,GAAA,EAAA,IAAA,CAAA,CAAA;QACA,MAAA;AACA,oBAAA,CAAA,KAAA,EAAA,GAAA,CAAA,CAAA;QACA;OACA,CAAA,CAAA;MAEA,CAAA,CAAA;KACA,CAAA,CAAA;IACA,CAAA,CAAA;GACA;;;SAEA,mBAAA,GAAA,EAAA,CAAA,EAAA;AACA,OAAA,MAAA,CAAA;AACA,OAAA;AACA,QAAA,CAAA,IAAA,EAAA,EAAA;;AAEA,WAAA,GAAA,IAAA,MAAA,CAAA,GAAA,CAAA,CAAA;KACA,MAAA;;AAEA,WAAA,GAAA,IAAA,MAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAAA;KACA;IACA,CAAA,OAAA,KAAA,EAAA;;AAEA,WAAA,CAAA,GAAA,CAAA,qCAAA,CAAA,CAAA;AACA,QAAA,EAAA,CAAA;IACA;AACA,UAAA,MAAA,CAAA;GACA;;;SAEA,sBAAA,EAAA,EAAA,GAAA,EAAA;;AAEA,OAAA,EAAA,CAAA,IAAA,CAAA,GAAA,CAAA,EAAA;;AAEA,QAAA,MAAA,GAAA,GAAA,CAAA,KAAA,CAAA,EAAA,CAAA,CAAA;;AAEA,WAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA;AACA,QAAA,EAAA,CAAA;IACA,MAAA;AACA,WAAA,CAAA,GAAA,CAAA,aAAA,CAAA,CAAA;AACA,QAAA,EAAA,CAAA;IACA;GACA;;;SAEA,kBAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA;AACA,OAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,EAAA;;AAEA,QAAA,MAAA,GAAA,GAAA,CAAA,OAAA,CAAA,GAAA,EAAA,IAAA,CAAA,CAAA;AACA,WAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA;AACA,QAAA,EAAA,CAAA;IACA,MAAA;AACA,WAAA,CAAA,GAAA,CAAA,aAAA,CAAA,CAAA;AACA,QAAA,EAAA,CAAA;IACA;GAEA;;;QA5EA,KAAA","file":"main.js","sourcesContent":["//var babel = require(\"babel\");\r\n//interface pro readline\r\nclass Regex{\r\n\tconstructor(){\r\nvar readline = require('readline')\r\nvar rl = readline.createInterface({\r\n  input: process.stdin,\r\n  output: process.stdout\r\n})\r\n\r\nmain();\r\n}\r\n\r\n main(){\r\n\tvar regex, str\r\n\t//funkce, která přečte regulární výraz\r\n\trl.question('Enter regex: ', (answer) =>{\r\n\t\trl.question('Enter flags: ',(flag)=>{\r\n\t\t\tregex = prevodReg(answer,flag)\r\n\t\t\t\t//funkce, která přečte zadaný text\r\n\t\t\t\trl.question('Enter text: ', (ans) =>{\r\n\t\t\t\t\tstr = ans\r\n\t\t\t\t\trl.question('Replacement: ',(repl)=>{\r\n\t\t\t\t\t\tif(repl != \"\"){\r\n\t\t\t\t\t\t\tnahradit(regex,ans,repl)\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tzjistitShodu(regex,ans)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t});\r\n\t\t});\r\n\t});\r\n};\r\n\r\nprevodReg(reg,f){\r\n\tvar vystup\r\n\ttry{\r\n\t\tif(f == \"\"){\r\n\t\t\t//zadaný výraz se převede do regulárního výrazu bez vlaječky\r\n\t\t\tvystup = new RegExp(reg)\r\n\t\t}else{\r\n\t\t\t//zadaný výraz se převede do regulárního výrazu i s vlaječkou\r\n\t\t\tvystup = new RegExp(reg,f)\r\n\t\t}\r\n\t}catch (error){\r\n\t\t//odchycení výjimky SyntaxError\r\n\t\tconsole.log(\"SyntaxError: Nesprávně zadaný výraz\");\r\n\t\tmain()\r\n\t}\r\n\treturn vystup\r\n};\r\n\r\nzjistitShodu(re,str){\r\n\t//zajistí se, zda daný text odpovídá vzoru\r\n\tif(re.test(str)){\r\n\t\t//vrací substring odpovídající vzoru\r\n\t\tvar newstr = str.match(re)\r\n\t\t//var newstr = re.exec(str);\r\n\t\tconsole.log(newstr)\r\n\t\tmain()\r\n\t}else{\r\n\t\tconsole.log(\"Žádná shoda\")\r\n\t\tmain()\r\n\t}\r\n};\r\n\r\nnahradit(reg,str,repl){\r\n\tif(reg.test(str)){\r\n\t\t//nahradí zadaný text\r\n\t\tvar newstr = str.replace(reg,repl)\r\n\t\tconsole.log(newstr)\r\n\t\tmain()\r\n\t}else{\r\n\t\tconsole.log(\"Žádná shoda\")\r\n\t\tmain()\r\n\t}\r\n\r\n}\r\n\r\n}\r\n"],"sourceRoot":"/source/"}